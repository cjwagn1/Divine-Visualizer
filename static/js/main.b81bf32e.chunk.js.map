{"version":3,"sources":["components/main.js","components/sound.js","components/audio.js","App.js","serviceWorker.js","index.js"],"names":["soundT","Sound","className","Main","window","onload","file","document","getElementById","audio","onchange","files","this","src","URL","createObjectURL","load","play","context","AudioContext","createMediaElementSource","analyser","createAnalyser","canvas","width","innerWidth","height","innerHeight","ctx","getContext","connect","destination","fftSize","bufferLength","frequencyBinCount","console","log","barHeight","dataArray","Uint8Array","WIDTH","HEIGHT","barWidth","x","renderFrame","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","i","r","g","Audio","id","type","accept","controls","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAKIA,E,gCCUWC,G,gBAXM,WACnB,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,QAAd,uBACA,6BACE,4BAAQA,UAAU,UAAlB,cDyEOC,EA3EK,WAwElB,OAvEAC,OAAOC,OAAS,WACd,IAAIC,EAAOC,SAASC,eAAe,SAC/BC,EAAQF,SAASC,eAAe,SAEpCF,EAAKI,SAAW,WACd,IAAIC,EAAQC,KAAKD,MACjBF,EAAMI,IAAMC,IAAIC,gBAAgBJ,EAAM,IACtCF,EAAMO,OACNP,EAAMQ,OACN,IAAIC,EAAU,IAAIC,aACdN,EAAMK,EAAQE,yBAAyBX,GACvCY,EAAWH,EAAQI,iBAEnBC,EAAShB,SAASC,eAAe,UACrCe,EAAOC,MAAQpB,OAAOqB,WACtBF,EAAOG,OAAStB,OAAOuB,YACvB,IAAIC,EAAML,EAAOM,WAAW,MAE5BhB,EAAIiB,QAAQT,GACZA,EAASS,QAAQZ,EAAQa,aAEzBV,EAASW,QAAU,KAEnB,IAAIC,EAAeZ,EAASa,kBAC5BC,QAAQC,IAAIH,GAEZ,IAMII,EANAC,EAAY,IAAIC,WAAWN,GAE3BO,EAAQjB,EAAOC,MACfiB,EAASlB,EAAOG,OAEhBgB,EAAYF,EAAQP,EAAgB,IAEpCU,EAAI,EA2BRlC,EAAMQ,OAzBN,SAAS2B,IACPC,sBAAsBD,GAEtBD,EAAI,EAEJtB,EAASyB,qBAAqBR,GAE9BV,EAAImB,UAAY,UAChBnB,EAAIoB,SAAS,EAAG,EAAGR,EAAOC,GAE1B,IAAK,IAAIQ,EAAI,EAAGA,EAAIhB,EAAcgB,IAAK,CAGrC,IAAIC,GAFJb,EAAYC,EAAUW,IAEIA,EAAIhB,EAAV,GAChBkB,EAAWF,EAAIhB,EAAX,IAGRL,EAAImB,UAAY,OAASG,EAAI,IAAMC,EAAI,OAEvCvB,EAAIoB,SAASL,EAAe,EAAZN,EAA2B,EAAXK,EAAgB,EAAGL,GAEnDM,GAAKD,EAAW,GAKpBE,KAKF5C,EAAS,kBAAC,EAAD,MAKJ,6BAAMA,IE/DAoD,EAZM,WACnB,OACE,yBAAKlD,UAAU,UACb,6BACE,2BAAOmD,GAAG,QAAQC,KAAK,OAAOC,OAAO,YACrC,4BAAQF,GAAG,WACX,2BAAOA,GAAG,QAAQG,UAAQ,OCQnBC,G,MAXH,WACV,OACE,yBAAKvD,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UCAYwD,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASC,eAAe,SD6H3C,kBAAmBwD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b81bf32e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Soundout from \"./soundout.js\";\r\nimport Sound from \"./sound.js\";\r\n\r\nimport \"../css/main.css\";\r\nvar soundT;\r\n\r\nexport const Main = () => {\r\n  window.onload = function() {\r\n    var file = document.getElementById(\"input\");\r\n    var audio = document.getElementById(\"audio\");\r\n\r\n    file.onchange = function() {\r\n      var files = this.files;\r\n      audio.src = URL.createObjectURL(files[0]);\r\n      audio.load();\r\n      audio.play();\r\n      var context = new AudioContext();\r\n      var src = context.createMediaElementSource(audio);\r\n      var analyser = context.createAnalyser();\r\n\r\n      var canvas = document.getElementById(\"canvas\");\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      var ctx = canvas.getContext(\"2d\");\r\n\r\n      src.connect(analyser);\r\n      analyser.connect(context.destination);\r\n\r\n      analyser.fftSize = 1024;\r\n\r\n      var bufferLength = analyser.frequencyBinCount;\r\n      console.log(bufferLength);\r\n\r\n      var dataArray = new Uint8Array(bufferLength);\r\n\r\n      var WIDTH = canvas.width;\r\n      var HEIGHT = canvas.height;\r\n\r\n      var barWidth = (WIDTH / bufferLength) * 2.5;\r\n      var barHeight;\r\n      var x = 0;\r\n\r\n      function renderFrame() {\r\n        requestAnimationFrame(renderFrame);\r\n\r\n        x = 0;\r\n\r\n        analyser.getByteFrequencyData(dataArray);\r\n\r\n        ctx.fillStyle = \"#1a1a1d\";\r\n        ctx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        for (var i = 0; i < bufferLength; i++) {\r\n          barHeight = dataArray[i];\r\n\r\n          var r = barHeight + 90 * (i / bufferLength);\r\n          var g = 250 * (i / bufferLength);\r\n          var b = 90;\r\n\r\n          ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n\r\n          ctx.fillRect(x, barHeight * 2, (barWidth * 1) / 2, barHeight);\r\n\r\n          x += barWidth + 1;\r\n        }\r\n      }\r\n\r\n      audio.play();\r\n      renderFrame();\r\n    };\r\n  };\r\n\r\n  if (1 == 1) {\r\n    soundT = <Sound />;\r\n  } else {\r\n    soundT = <Soundout />;\r\n  }\r\n\r\n  return <div>{soundT}</div>;\r\n};\r\n\r\nexport default Main;\r\n// audio.paused && audio.currentTime > 0 && !audio.ended\r\n","import React from \"react\";\r\n\r\nimport \"../css/main.css\";\r\n\r\nexport const Sound = () => {\r\n  return (\r\n    <div className=\"center\">\r\n      <h1 className=\"font\">Music Visualization</h1>\r\n      <div>\r\n        <button className=\"button\">Upload</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sound;\r\n","import React from \"react\";\r\n\r\nimport \"../css/main.css\";\r\n\r\nexport const Audio = () => {\r\n  return (\r\n    <div className=\"center\">\r\n      <div>\r\n        <input id=\"input\" type=\"file\" accept=\"audio/*\" />\r\n        <canvas id=\"canvas\"></canvas>\r\n        <audio id=\"audio\" controls></audio>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Audio;\r\n","import React from \"react\";\nimport \"./css/App.css\";\nimport Sound from \"./components/sound.js\";\nimport Main from \"./components/main.js\";\nimport Audio from \"./components/audio.js\";\nimport Footer from \"./components/footer.js\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"wrap\">\n        <Audio />\n        <Main />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}